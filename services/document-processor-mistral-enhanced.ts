// PROCESADOR MISTRAL OPTIMIZADO PARA M√öLTIPLES FACTURAS
// services/document-processor-mistral-enhanced.ts

import axios from 'axios';
import { createClient } from '@supabase/supabase-js';

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
);

const MISTRAL_CONFIG = {
  API_KEY: process.env.MISTRAL_API_KEY!,
  API_URL: 'https://api.mistral.ai/v1/chat/completions',
  MODEL: 'mistral-small-latest',
  TIMEOUT: 180000 // 3 minutos para documentos grandes
};

// PROMPT ULTRA OPTIMIZADO PARA DETECTAR TODAS LAS FACTURAS
const ENHANCED_FACTURA_PROMPT = `
MISI√ìN CR√çTICA: DETECTAR Y EXTRAER TODAS LAS FACTURAS EN ESTE DOCUMENTO

Este documento puede contener M√öLTIPLES FACTURAS en M√öLTIPLES P√ÅGINAS. Tu objetivo es:
1. ESCANEAR COMPLETAMENTE todas las p√°ginas del documento
2. IDENTIFICAR cada factura individual (incluso si est√°n en p√°ginas separadas)
3. EXTRAER informaci√≥n completa de CADA UNA

PATRONES DE DETECCI√ìN DE M√öLTIPLES FACTURAS:
- Busca repetici√≥n de elementos clave: n√∫meros de factura, fechas, totales
- Cada p√°gina puede contener una factura completa
- Algunas facturas pueden ocupar 2-3 p√°ginas consecutivas
- Busca separadores visuales entre facturas
- Identifica cambios en proveedores, clientes o fechas como indicador de nueva factura

ALGORITMO DE DETECCI√ìN:
1. Lee TODO el documento p√°gina por p√°gina
2. Identifica CADA n√∫mero de factura √∫nico
3. Para cada n√∫mero de factura, extrae TODO su contenido asociado
4. Agrupa informaci√≥n que pertenece a la misma factura
5. Separa facturas diferentes claramente

ESTRUCTURA JSON REQUERIDA:
Si encuentras M√öLTIPLES FACTURAS, devuelve un ARRAY:
[
  {
    "invoice_number": "n√∫mero_1",
    "issue_date": "DD/MM/YYYY",
    "page_range": "p√°ginas donde aparece esta factura",
    "supplier": { ... },
    "customer": { ... },
    "items": [ ... ],
    "tax_breakdown": [ ... ],
    "totals": { ... }
  },
  {
    "invoice_number": "n√∫mero_2",
    "issue_date": "DD/MM/YYYY", 
    "page_range": "p√°ginas donde aparece esta factura",
    "supplier": { ... },
    "customer": { ... },
    "items": [ ... ],
    "tax_breakdown": [ ... ],
    "totals": { ... }
  }
]

CAMPOS OBLIGATORIOS PARA CADA FACTURA:
{
  "invoice_number": "OBLIGATORIO - n√∫mero √∫nico de factura",
  "issue_date": "DD/MM/YYYY",
  "due_date": "DD/MM/YYYY o null",
  "page_range": "ej: 'p√°gina 1-2' o 'p√°gina 5'",
  "document_sequence": "n√∫mero secuencial en el documento (1, 2, 3...)",
  "supplier": {
    "name": "OBLIGATORIO",
    "nif_cif": "identificador fiscal",
    "address": "direcci√≥n completa",
    "postal_code": "CP",
    "city": "ciudad",
    "province": "provincia",
    "phone": "tel√©fono",
    "email": "email"
  },
  "customer": {
    "name": "OBLIGATORIO",
    "nif_cif": "identificador fiscal",
    "address": "direcci√≥n completa", 
    "postal_code": "CP",
    "city": "ciudad",
    "province": "provincia"
  },
  "items": [
    {
      "description": "descripci√≥n detallada",
      "quantity": n√∫mero,
      "unit_price": n√∫mero,
      "subtotal": n√∫mero,
      "tax_rate": porcentaje,
      "tax_amount": n√∫mero,
      "total": n√∫mero
    }
  ],
  "tax_breakdown": [
    {
      "tax_rate": porcentaje,
      "tax_base": base_imponible,
      "tax_amount": importe_iva,
      "description": "tipo de IVA"
    }
  ],
  "totals": {
    "subtotal": n√∫mero,
    "total_tax_amount": n√∫mero,
    "total": n√∫mero,
    "discount": n√∫mero
  },
  "payment_method": "m√©todo de pago",
  "payment_terms": "condiciones",
  "notes": "observaciones",
  "currency": "EUR",
  "extraction_confidence": 0.95
}

INSTRUCCIONES CR√çTICAS:
1. ‚ö†Ô∏è NO TE DETENGAS en la primera factura - SIGUE LEYENDO todo el documento
2. ‚ö†Ô∏è CUENTA cu√°ntas facturas diferentes has encontrado antes de responder
3. ‚ö†Ô∏è Si ves el mismo n√∫mero de factura repetido, es UNA SOLA factura extendida
4. ‚ö†Ô∏è Si ves n√∫meros de factura DIFERENTES, son facturas SEPARADAS
5. ‚ö†Ô∏è Incluye campo "document_sequence" para ordenar las facturas
6. ‚ö†Ô∏è Incluye campo "page_range" para saber d√≥nde est√° cada factura

VALIDACI√ìN FINAL:
Antes de devolver el JSON, VERIFICA:
- ¬øHas revisado TODAS las p√°ginas del documento?
- ¬øCada factura tiene un "invoice_number" √∫nico?
- ¬øEl array contiene TODAS las facturas que mencionas?
- ¬øLos totales suman correctamente?

FORMATO DE SALIDA:
Devuelve SOLO el JSON v√°lido (array si hay m√∫ltiples facturas, objeto si hay una sola).
NO incluyas explicaciones, markdown o texto adicional.
`;

interface EnhancedMistralResult {
  success: boolean;
  jobId: string;
  extracted_data: any;
  document_url?: string;
  total_invoices_detected: number;
  processing_metadata: {
    upload_time_ms: number;
    mistral_processing_time_ms: number;
    total_time_ms: number;
    method: 'mistral-document-understanding-enhanced';
    confidence: number;
    document_pages?: number;
    max_tokens_used?: number;
    invoices_found: number;
  };
}

export class EnhancedMistralProcessor {
  private apiKey: string = MISTRAL_CONFIG.API_KEY;
  private apiUrl: string = MISTRAL_CONFIG.API_URL;
  private model: string = MISTRAL_CONFIG.MODEL;

  constructor() {
    console.log('üöÄ [MistralEnhanced] Inicializando procesador optimizado para m√∫ltiples facturas');
    console.log(`üìã [MistralEnhanced] Modelo: ${this.model}`);
    console.log(`üîó [MistralEnhanced] Endpoint: ${this.apiUrl}`);
  }

  private async uploadToStorage(pdfBuffer: Buffer, jobId: string): Promise<string> {
    const startTime = Date.now();
    console.log(`üì§ [MistralEnhanced] Subiendo PDF a Supabase Storage...`);

    try {
      const fileName = `documents/${jobId}/original.pdf`;
      
      const { data, error } = await supabase.storage
        .from('documents')
        .upload(fileName, pdfBuffer, {
          contentType: 'application/pdf',
          upsert: true
        });

      if (error) {
        throw new Error(`Error al subir a Storage: ${error.message}`);
      }

      const { data: urlData } = supabase.storage
        .from('documents')
        .getPublicUrl(fileName);

      const uploadTime = Date.now() - startTime;
      console.log(`‚úÖ [MistralEnhanced] PDF subido en ${uploadTime}ms`);
      console.log(`üîó [MistralEnhanced] URL: ${urlData.publicUrl}`);

      return urlData.publicUrl;
    } catch (error) {
      console.error('‚ùå [MistralEnhanced] Error al subir PDF:', error);
      throw error;
    }
  }

  private async processWithMistralEnhanced(documentUrl: string): Promise<any> {
    const startTime = Date.now();
    console.log(`üîÑ [MistralEnhanced] Procesando con configuraci√≥n optimizada...`);

    try {
      const payload = {
        model: this.model,
        messages: [
          {
            role: 'user',
            content: [
              {
                type: 'text',
                text: ENHANCED_FACTURA_PROMPT
              },
              {
                type: 'document_url',
                document_url: documentUrl
              }
            ]
          }
        ],
        // CONFIGURACI√ìN OPTIMIZADA PARA DOCUMENTOS GRANDES
        document_image_limit: 16, // Aumentado para m√°s p√°ginas
        document_page_limit: 128, // Aumentado significativamente
        temperature: 0.05, // Muy baja para m√°xima consistencia
        max_tokens: 8000, // Aumentado para m√∫ltiples facturas
        top_p: 0.9
      };

      console.log(`üì° [MistralEnhanced] Enviando request optimizado...`);
      console.log(`üìä [MistralEnhanced] L√≠mites: ${payload.document_page_limit} p√°ginas, ${payload.max_tokens} tokens`);
      
      const response = await axios.post(this.apiUrl, payload, {
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
          'Content-Type': 'application/json'
        },
        timeout: MISTRAL_CONFIG.TIMEOUT
      });

      const processingTime = Date.now() - startTime;
      console.log(`‚úÖ [MistralEnhanced] Respuesta recibida en ${processingTime}ms`);

      const extractedText = response.data.choices[0].message.content;
      console.log(`üìÑ [MistralEnhanced] Contenido extra√≠do: ${extractedText.substring(0, 300)}...`);
      console.log(`üìè [MistralEnhanced] Longitud total: ${extractedText.length} caracteres`);

      // PARSEO MEJORADO CON DETECCI√ìN DE M√öLTIPLES FACTURAS
      let structuredData;
      let totalInvoicesDetected = 0;

      try {
        // Limpiar y extraer JSON
        let jsonText = extractedText;
        
        // Buscar JSON en bloques de c√≥digo
        const jsonBlockMatch = extractedText.match(/```json\s*([\s\S]*?)\s*```/);
        if (jsonBlockMatch) {
          jsonText = jsonBlockMatch[1];
          console.log('üìã [MistralEnhanced] JSON encontrado en bloque de c√≥digo');
        } else {
          // Buscar array o objeto JSON en texto libre
          const jsonMatch = extractedText.match(/(\[[\s\S]*\]|\{[\s\S]*\})/);
          if (jsonMatch) {
            jsonText = jsonMatch[1];
            console.log('üìã [MistralEnhanced] JSON encontrado en texto libre');
          }
        }
        
        // Limpiar JSON
        jsonText = jsonText
          .replace(/[\u0000-\u001F\u007F-\u009F]/g, '')
          .replace(/\n\s*\/\/.*$/gm, '')
          .replace(/,\s*([}\]])/g, '$1')
          .trim();

        // Parsear JSON
        structuredData = JSON.parse(jsonText);

        // Contar facturas detectadas
        if (Array.isArray(structuredData)) {
          totalInvoicesDetected = structuredData.length;
          console.log(`üéØ [MistralEnhanced] ${totalInvoicesDetected} facturas detectadas en array`);
          
          // Enriquecer cada factura
          structuredData = structuredData.map((invoice, index) => ({
            ...invoice,
            document_sequence: index + 1,
            extraction_confidence: 0.95,
            currency: invoice.currency || 'EUR'
          }));
        } else {
          totalInvoicesDetected = 1;
          console.log(`üéØ [MistralEnhanced] 1 factura detectada (objeto √∫nico)`);
          
          // Enriquecer factura √∫nica
          structuredData = {
            ...structuredData,
            document_sequence: 1,
            extraction_confidence: 0.95,
            currency: structuredData.currency || 'EUR'
          };
        }

        console.log(`‚úÖ [MistralEnhanced] JSON parseado exitosamente`);

      } catch (parseError) {
        console.error('‚ùå [MistralEnhanced] Error parsing JSON:', parseError);
        
        // Fallback con regex para contar facturas
        const invoiceNumberMatches = extractedText.match(/"invoice_number":\s*"([^"]+)"/g);
        if (invoiceNumberMatches) {
          totalInvoicesDetected = invoiceNumberMatches.length;
          console.log(`üîç [MistralEnhanced] Fallback: ${totalInvoicesDetected} n√∫meros de factura detectados`);
        }
        
        structuredData = {
          parsing_error: 'Error parseando JSON optimizado',
          extracted_content_length: extractedText.length,
          potential_invoices_detected: totalInvoicesDetected,
          raw_response: extractedText.substring(0, 2000)
        };
      }

      return {
        structured_data: structuredData,
        raw_response: extractedText,
        processing_time_ms: processingTime,
        usage: response.data.usage,
        total_invoices_detected: totalInvoicesDetected
      };

    } catch (error: any) {
      console.error('‚ùå [MistralEnhanced] Error procesando documento:', error);
      throw new Error(`Error en Mistral Enhanced: ${error?.message || 'Error desconocido'}`);
    }
  }

  async processDocument(
    pdfBuffer: Buffer, 
    jobId?: string
  ): Promise<EnhancedMistralResult> {
    const totalStartTime = Date.now();
    const finalJobId = jobId || `enhanced_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;

    console.log(`üöÄ [MistralEnhanced] Iniciando procesamiento optimizado`);
    console.log(`üìã [MistralEnhanced] Job ID: ${finalJobId}`);
    console.log(`üìè [MistralEnhanced] Tama√±o PDF: ${pdfBuffer.length} bytes`);

    try {
      // Subir PDF
      const uploadStartTime = Date.now();
      const documentUrl = await this.uploadToStorage(pdfBuffer, finalJobId);
      const uploadTime = Date.now() - uploadStartTime;

      // Procesar con configuraci√≥n optimizada
      const mistralResult = await this.processWithMistralEnhanced(documentUrl);

      const totalTime = Date.now() - totalStartTime;

      console.log(`üéâ [MistralEnhanced] Procesamiento completado en ${totalTime}ms`);
      console.log(`üìä [MistralEnhanced] Total facturas detectadas: ${mistralResult.total_invoices_detected}`);

      return {
        success: true,
        jobId: finalJobId,
        extracted_data: mistralResult.structured_data,
        document_url: documentUrl,
        total_invoices_detected: mistralResult.total_invoices_detected,
        processing_metadata: {
          upload_time_ms: uploadTime,
          mistral_processing_time_ms: mistralResult.processing_time_ms,
          total_time_ms: totalTime,
          method: 'mistral-document-understanding-enhanced',
          confidence: 0.95,
          document_pages: mistralResult.usage?.total_tokens ? Math.ceil(mistralResult.usage.total_tokens / 1000) : undefined,
          max_tokens_used: mistralResult.usage?.total_tokens,
          invoices_found: mistralResult.total_invoices_detected
        }
      };

    } catch (error: any) {
      console.error(`‚ùå [MistralEnhanced] Error general:`, error);

      return {
        success: false,
        jobId: finalJobId,
        extracted_data: {
          error: error?.message || 'Error desconocido',
          error_type: 'enhanced_mistral_processing_error',
          timestamp: new Date().toISOString()
        },
        total_invoices_detected: 0,
        processing_metadata: {
          upload_time_ms: 0,
          mistral_processing_time_ms: 0,
          total_time_ms: Date.now() - totalStartTime,
          method: 'mistral-document-understanding-enhanced',
          confidence: 0,
          invoices_found: 0
        }
      };
    }
  }
}

export const enhancedMistralProcessor = new EnhancedMistralProcessor(); 